cars2K <- lm(mpg ~ I(wt-2), data = mtcars)
c <- summary(cars2K)$coefficients
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
c[1,2] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 1]
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
c <- summary(cars2K)$coefficients/2
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
cars2K <- lm(mpg ~ wt, data = mtcars)
c <- summary(cars2K)$coefficients/2
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
cars2K <- lm(mpg ~ wt, data = mtcars)
c <- summary(cars2K)$coefficients
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
cars2K <- lm(mpg ~ wt, data = mtcars)
c <- summary(cars2K)$coefficients
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
cars2K <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
c <- summary(cars2K)$coefficients
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
newCar <- c(3)
coef(cars2K)[1] + coef(cars2K)[2] * newCar
predict(cars2K, newdata = data.frame(wt = newCar)
)
c[1, 2]
c[1, 1]
predict(cars, newdata = data.frame(wt = newCar)
)
summary(cars2K)
20.09062-3.046
18.991-3.046
21.29-3.046
c <- summary(cars2K)$coefficients
c[1,1] + c(-1, 1) * qt(.975, df = cars2K$df) * c[1, 2]
cars <- lm(mpg ~ wt, data = mtcars)
predict(cars, newdata = data.frame(wt = newCar)
)
predict(cars, newdata = data.frame(wt = newCar))$conf
p<-predict(cars, newdata = data.frame(wt = newCar))
p
summary(cars)
mean(mtcars$mpg)
mean(mtcars$wt)
21.25+5.3445
cars2 <- lm(mpg ~ I(wt/2), data = mtcars)
coef(cars2)
-10.68894 + c(-1, 1) * qt(.975, df = cars2$df)
summary(cars2)
c[2,1] + c(-1, 1) * qt(.975, df = cars2$df) * cars[2, 2]
coefCars <- summary(cars)$coefficients
coefCars[2,1] + c(-1, 1) * qt(.975, df = cars2$df) * coefCars[2, 2]
cars2 <- lm(mpg ~ wt, data = mtcars)
coefCars <- summary(cars)$coefficients
coefCars[2,1] + c(-1, 1) * qt(.975, df = cars2$df) * coefCars[2, 2]
-6.486308 * 2
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(lm)
summary(fit)
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
sum(fit)$coefficients * 2
sum(fit)$coefficients
summary(fit)$coefficients * 2
summary(fit)$coefficients
coef(fit)
fit <- lm(mpg ~ cyl + wt - 1, data = mtcars)
coef(fit)
summary(fit)$coefficients
summary(fit)
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) + wt), data = mtcars)
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) + wt, data = mtcars)
summary(fit)
coef(fit)
-1.815277 / 4.255582
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')), data = mtcars)
-1.815277 / 4.255582
coef(fit)
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) + wt, data = mtcars)
coef(fit)
summary(fit)
fit <- lm(mpg ~ cyl[cyl == '8'] + cyl[cyl == '4'] + wt, data = mtcars)
cyls <- relevel(mtcars$cyl, "8")
cyls <- relevel(mtcars$cyl, 8)
mtcars$cyl
fit <- lm(mpg ~ cyl[cyl == '4'] + cyl[cyl == '6'] + wt, data = mtcars)
fit <- lm(mpg ~ cyl[cyl == '4'] + cyl[cyl == '6'] + wt, data = mtcars)
fit <- lm(mpg ~ cyl[cyl == '8'] + cyl[cyl == '4'] + wt, data = mtcars)
fit <- lm(mpg ~ I(1 * (cyl == '4')) + I(1 * (cyl == '6')) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl[cyl == '4'] + wt, data = mtcars)
fit <- lm(mpg ~ I(1 * (cyl == '4')) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ relevel(factor(cyl), 8) + wt, data = mtcars)
fit <- lm(mpg ~ relevel(factor(cyl), "8") + wt, data = mtcars)
summary(fit)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit)
summary(lm(mpg ~ factor(cyl), data = mtcars))
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y ~ x))
summary(lm(y ~ x - 1))
summary(lm(y ~ x))
summary(lm(y ~ x - 1))
1.567 - 1.713
cor(mtcars$mpg, mtcars$wt)
pairs(mtcars)
xx <- c(8.58, 10.46, 9.01, 9.64, 8.86)
sd(xx)
mean(xx)
mean(xx) / sd(xx)
xx - 12.39462
((xx - mean(xx))/sd(xx))
mean(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
summary(lm(y ~ x))
summary(lm(y ~ x))$sigma
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62
)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y ~ x))$sigma
summary(lm(y ~ x))
x1 <- c(0.18, -1.54, 0.42, 0.95)
w1 <- c(2, 1, 3, 1)
w1 * x1
avg(w1*x1)
sum(w1*x1) / 4
sum(w1*(x1^2)) / 4
sqrt(sum(w1*(x1^2)) / 4)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y ~ x))
summary(lm(y ~ x - 1))
summary(lm(y ~ x - 1))$intercept
lm(mpg ~ wt, data=mtcars)
summary(lm(mpg ~ wt, data=mtcars))
summary(lm(mpg ~ wt, data=mtcars))$slope
summary(lm(mpg ~ wt, data=mtcars))$coefficient
1.5 * 0.4
xN <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xN - mean(xN)
xN - sd(xN)
mean(xN)
(xN-mean(xN)) / sd(xN)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y ~ x))
mean(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
cars <- mtcars
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
fit <- lm(y~x)
resid(fit)
sd(resid(fit))
data(mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
coef <- summary(fit)$coefficients
coef
coef[2,1] + c(-1,1) * qt(.975, df=fit$df) * coef[2,2]
coef[1,1] + c(-1,1) * qt(.975, df=fit$df) * coef[1,2]
fit <- lm(mpg ~ I(wt - mean(wt)), data=mtcars)
coef <- summary(fit)$coefficients
coef
coef[1,1] + c(-1,1) * qt(.975, df=fit$df) * coef[1,2]
coef[2,1] + c(-1,1) * qt(.975, df=fit$df) * coef[2,2]
ndat <- data.frame(wt = c(3))
predict(fit,ndat,interval=("confidence"))
fit1 <- lm(mpg ~ wt, data=mtcars)
predict(fit1,ndat,interval=("confidence"))
predict(fit1,ndat,interval=("prediction"))
fit1 <- lm(mpg ~ (wt * 2), data=mtcars)
fit1 <- lm(mpg ~ I(wt * 2), data=mtcars)
coef1 <- summary(fit1)$coefficients
coef1[2,1] + c(-1,1) * qt(.975, df=fit1$df) * coef1[2,2]
coef1[1,1] + c(-1,1) * qt(.975, df=fit1$df) * coef1[1,2]
fit1 <- lm(mpg ~ I(wt * .5), data=mtcars)
coef1 <- summary(fit1)$coefficients
coef1[1,1] + c(-1,1) * qt(.975, df=fit1$df) * coef1[1,2]
coef1[2,1] + c(-1,1) * qt(.975, df=fit1$df) * coef1[2,2]
fit2 <- lm(mpg ~ wt, data=mtcars)
summary(fit2)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install.packages(c("class", "cluster", "codetools", "DBI", "formatR", "gsubfn", "httr", "knitr", "labeling", "markdown", "MASS", "Matrix", "mgcv", "mime", "plotrix", "Rcpp", "RCurl", "swirl", "xlsx", "xlsxjars", "yaml"))
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, (varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag+attenu$dist)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gch_nor, gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, Galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals) / (n-2))
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit)
1 - (sRes / sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volumn ~ Height + Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit,fit2), coef)
library(AppliedPredictiveModeling)
install.package(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages(cement)
library(AppliedPredictiveModeling)
data(concrete)
install.packages('Applied Predictive Modeling')
install.packages('AppliedPredictiveModeling')
install.packages('caret')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(testing)
library(splines)
?bs
library(cut2)
install.packages('Hmisc')
featurePlot(x=training[,c('Cement','BlastFurnaceSlag','FlyAsh','Water','CoarseAggregate','FineAggregate','Age','Superplasticizer')], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c('Cement','FlyAsh','Age')], y=training$CompressiveStrength, plot="pairs")
plot( x=log(training$SuperPlasticizer + 1), y=training$CompressiveStrength )
log(training$SuperPlasticizer + 1)
log(training$Superplasticizer + 1)
plot( x=log(training$Superplasticizer + 1), y=training$CompressiveStrength )
featurePlot(x=training[,c('Cement','FlyAsh','Age')], y=training$CompressiveStrength, plot="pairs")
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=cut2(training$Cement,g=4))
load(Hmisc)
library(Hmisc)
plot(training$CompressiveStrength, col=cut2(training$Cement,g=4))
plot(training$CompressiveStrength, col=cut2(training$Cement,g=4))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh,g=4))
plot(training$CompressiveStrength, col=cut2(training$Superplasticizer,g=4))
plot(training$Cement, col=cut2(training$Superplasticizer,g=4))
plot(training$CompressiveStrength, col=cut2(training$FineAggregate,g=4))
plot(training$CompressiveStrength, col=cut2(training$Age,g=4))
plot(training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=4))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
hist(log(training$Superplasticizer + 1))
summary(log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
hist(log(training$Superplasticizer))
summary(log(training$Superplasticizer + 1))
hist(log(training$Superplasticizer + 1))
hist(log(training$Superplasticizer))
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training[,1]
training[1,]
subS <- subset(training,select=c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8'))
preP <- preProcess(subS, method="pca", thresh=0.80)
summary(preP)
preP[numComp]
preP['numComp'']
''
preP['numComp']
subS <- subset(training,select=c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8', 'diagnosis'))
lmFit <- lm(diagnosis ~ ., data=training)
predictors <- c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8')
modFit <- train(training$diagnosis ~ training[predictors], method="glm")
modFit <- train(diagnosis ~ predictors, data=training, method="glm")
modFit <- train(diagnosis ~ data.frame(predictors), data=training, method="glm")
modFit <- train(diagnosis ~ ., data=training, method="glm")
install.packages('caret')
install.packages("caret")
modFit <- train(diagnosis ~ ., data=training, method="glm")
library(caret)
modFit <- train(diagnosis ~ ., data=training, method="glm")
pred <- predict(preP)
pred <- predict(preP, training)
pred <- predict(preP, subS)
preP <- preProcess(subS, method="pca", thresh=0.80)
preP <- preProcess(subset(subS, select=c(-"diagnosis")), method="pca", thresh=0.80)
preP <- preProcess(subset(subS, select=-c("diagnosis")), method="pca", thresh=0.80)
preP <- preProcess(subset(subS, select=-c(diagnosis)), method="pca", thresh=0.80)
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pcs", thresh=0.80, data=training)
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.80, data=training)
install.packages('e1071', dependencies=TRUE)
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.80, data=training)
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", data=training)
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.80, data=training)
modFit <- train(subS$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.80, data=subS)
modFit <- train(subS$diagnosis ~ ., method="glm", preProcess="pca", data=subS)
normFit <- train(subS$diagnosis ~ ., method="glm", data=subS)
preP <- preProcess(subS, method="pca", thresh=0.80)
preP <- preProcess(subset(subS, select=-c(diagnosis)), method="pca", thresh=0.80)
preFit <- predict(preP,subS)
preFit <- predict(preP,subset(subS,select=-c(diagnosis)))
preModFit <- train(subS$diagnosis ~ .,method="glm",data=preFit)
confusionMatrix(testing$diagnosis,predict(normFit,testing))
confusionMatrix(testing$diagnosis,predict(modFit,testing))
confusionMatrix(testing$diagnosis,predict(preModFit,testing))
confusionMatrix(testing$diagnosis,predict(preModFit,testing))
confusionMatrix(testing$diagnosis,predict(preFit,testing))
preModFit <- train(training$diagnosis ~ .,method="glm",data=preFit)
confusionMatrix(testing$diagnosis,predict(preModFit,testing))
modFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", data=subS)
confusionMatrix(testing$diagnosis,predict(modFit,testing))
modFit <- train(subS$diagnosis ~ ., method="glm", preProcess="pca", data=subS)
confusionMatrix(testing$diagnosis,predict(modFit,testing))
modFit <- train(subS$diagnosis ~ ., method="glm", preProcess="pca", data=subS)
confusionMatrix(testing$diagnosis,predict(modFit,testing))
confusionMatrix(testing$diagnosis,predict(preModFit,testing))
confusionMatrix(testing$diagnosis,predict(normFit,testing))
preP <- preProcess(subset(subS, select=-c(diagnosis)), method="pca", thresh=0.80)
preFit <- predict(preP,subS)
preFit <- predict(preP,subset(subS,select=-c(diagnosis)))
preModFit <- train(subS$diagnosis ~ ., method="glm", data=preFit)
testPC <- predict(preFit, testing)
testPC <- predict(preFit, subset(testing,select=c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8','diagnosis')))
testPC <- predict(preP, subset(testing,select=c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8','diagnosis')))
testPC <- predict(preP, subset(testing,select=c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8')))
confusionMatrix(testing$diagnosis,predict(preModFit,testPC))
install.packages('shiny')
library(shiny)
runExample('01_hello')
setwd("~/")
dir
ls
ls()
dir()
setwd("~/GitHub/DevelopingDataProducts/SimpleDemo")
runApp('SimpleDemo')
setwd("~/GitHub/DevelopingDataProducts")
runApp('SimpleDemo')
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runExample("03_reactivity") # a reactive expression
runExample("03_reactivity") # a reactive expression
runExample("03_reactivity") # a reactive expression
runExample("03_reactivity") # a reactive expression
col(cars)
colnames(cars)
library(help = "datasets")
colnames(mtcars)
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
hist(x=input$xVar, data=mtcars)
hist(x="mpg", data=mtcars)
hist(x=mpg, data=mtcars)
hist(x=mtcars$mpg)
hist(x=mtcars$mpg)
runApp('SimpleDemo', display.mode = "showcase")
colnames(mtcars)
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
runApp('SimpleDemo', display.mode = "showcase")
shinyapps::setAccountInfo(name='johnmichaelr', token='F55FA7A627886C48B203986448BEF134', secret='AyPnTjq1V8D7lFEWrBCqX90teYozFl4nFM7LiAPF')
library(shinyapps)
install.packages('shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='johnmichaelr', token='F55FA7A627886C48B203986448BEF134', secret='AyPnTjq1V8D7lFEWrBCqX90teYozFl4nFM7LiAPF')
library('shinyapps')
shinyapps::setAccountInfo(name='johnmichaelr', token='F55FA7A627886C48B203986448BEF134', secret='AyPnTjq1V8D7lFEWrBCqX90teYozFl4nFM7LiAPF')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='johnmichaelr', token='F55FA7A627886C48B203986448BEF134', secret='AyPnTjq1V8D7lFEWrBCqX90teYozFl4nFM7LiAPF')
?deployapp
?deployApp
deployApp(appName='SimpleDemo', upload=TRUE)
deployApp(appDir='.\GitHub\DevelopingDataProducts', appName='SimpleDemo', upload=TRUE)
deployApp(appDir='.\\GitHub\\DevelopingDataProducts', appName='SimpleDemo', upload=TRUE)
dir
dir()
deployApp(appDir='.\', appName='SimpleDemo', upload=TRUE)
deployApp(appName='SimpleDemo', upload=TRUE)
deployApp()
getwd()
setwd("~/GitHub/DevelopingDataProducts/SimpleDemo")
deployApp(appName='SimpleDemo', upload=TRUE)
cyls <- mtcars$cyl[,-c(6)]
fit <- lm(mpg ~ cyl[cyl == '8'] + cyl[cyl == '4'] + wt, data = mtcars)
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) + wt), data = mtcars)
cyls <- relevel(mtcars$cyl, 8)
cyls <- relevel(mtcars$cyl, "8")
fit <- lm(mpg ~ cyl[cyl == '8'] + cyl[cyl == '4'] + wt, data = mtcars)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) + wt, data = mtcars)
summary(fit)
coef(fit)
summary(lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) , data = mtcars))
fit <- lm(mpg ~ relevel(factor(cyl), "8") + wt, data = mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitH <- lm(y~x)
dfbeta(fitH)
round(dfbetas(fit)[1:5,2],3)
round(dfbetas(fitH)[1:5,2],3)
round(hatvalues(fitH)[1:5],3)
summary(fit)
summary(lm(mpg ~ I(1 * (cyl == '8')) + I(1 * (cyl == '4')) , data = mtcars))
library(slidify)
setwd("~/GitHub/DevelopingDataProducts/Slidify")
author('ReproduciblePitch')
Edit YAML front matter
framework   : html5slides   # {io2012, html5slides, shower, dzslides, ...}
publish(user = "johnmichaelr", repo = "SlidifyDemo")
publish(user = "johnmichaelr", repo = "SlidifyDemo")
publish(user = "johnmichaelr", repo = "SlidifyDemo")
publish(user = 'johnmichaelr', repo = 'SlidifyDemo')
publish(user = "johnmichaelr", repo = "SlidifyDemo")
publish(user = "johnmichaelr", repo = "SlidifyDemo")
publish(user = "JohnMichaelR", repo = "SlidifyDemo")
publish(user = "JohnMichaelR", repo = "SlidifyDemo")
publish(user = "JohnMichaelR", repo = "Slidify")
publish(user = "JohnMichaelR", repo = "Slidify")
publish(user = "JohnMichaelR", repo = "Slidify/ReproduciblePitch")
publish(user = "JohnMichaelR", repo = "Slidify")
publish(user = "JohnMichaelR", repo = "Slidify")
install.packages(c("Hmisc", "KernSmooth", "xtable"))
getwd()
publish(user = "JohnMichaelR", repo = "Slidify")
library(slidify)
publish(user = "JohnMichaelR", repo = "Slidify")
publish(user = "JohnMichaelR", repo = "Slidify")
publish(user = "JohnMichaelR", repo = "SlidifyDemo")
publish(user = "JohnMichaelR", repo = "SlidifyDemo")
publish(user = "JohnMichaelR", repo = "SlidifyDemo")
options(rpubs.upload.method = "internal")
install packages("markdown")
install_packages("markdown")
library(markdown)
rpubsUpload('SimpleDemo', 'index.html', id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
getwd()
rpubsUpload('SimpleDemo', 'C:/Users/jrobertson.CL/Documents/GitHub/DevelopingDataProducts/Slidify/ReproduciblePitch/index.html', id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
